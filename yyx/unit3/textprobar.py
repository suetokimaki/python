'''
文本进度条-EarlyPause 
     请先在本地环境中编写程序，成功运行后，再粘贴到python123系统中进行提交。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
描述
      通常情况下，进度条会通过线性增长来表示一项工作的完成进度。然而，现实中可能会出现各种原因导致进度条不能保持线性增长。不同进度条会影响人们对时间的感知。美国卡内基·梅隆大学的研究人员做了进度条设计和人类心理的相关研究。相关研究表明用户可以容忍最初的慢速增长，特别是在末尾阶段能进行加速会有较好的心理预期。EarlyPause 时间函数就满足该原理，请根据以下函数的数学表达式，设计一个文本进度条。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

f(x) = x + (1 - sin(x * pi * 2 + pi / 2)) / (-8)
 ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
提示：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
正弦函数和圆周率pi的调用方法如下：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
1. 引入math库：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
2. 使用math.sin()和math.pi调用‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

import math

pi = math.pi
y = math.sin(x)
 ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
 ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‬
输入输出示例
时间函数为:EarlyPause
-----------执行开始----------
100%[*************************************************->]5.06ss
 -----------执行结束----------
 ‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
以下执行结果可以用来观察FastPower时间函数的速度趋势。（去掉最后一个print()函数中的“\n“）
'''
# TextProBar_EarlyPause进度条
import time
import math


def EarlyPause(x):
    t = x + (1 - math.sin(x * math.pi * 2 + math.pi / 2)) / (-8)
    return t


scale = 50

timeFunctionName = "EarlyPause"

print("时间函数为:{}".format(timeFunctionName))
print("执行开始".center(scale//2, "-"), "\n")

# 设置开始时间
start = time.perf_counter()

for i in range(scale+1):
    ratio = i / scale

    # timeFunction = EarlyPause
    timeFunction = int(EarlyPause(ratio)*scale)

    # 设置已经执行过的时间movedBar、未执行时间residualBar、以及当前执行过的时间占总时间的比值percent
    movedBar = '*'*timeFunction
    residualBar = '-'*(scale-timeFunction)
    percent = (EarlyPause(ratio)*scale/scale)*100

    # 获取当前执行时间
    dur = time.perf_counter()-start

    # 输出进度条
    print("\r{:^3.0f}%[{}->{}]{:.2f}s\n".format(percent,
                                                movedBar, residualBar, dur))

    # 设置等待时间为0.1秒
    time.sleep(0.1)

print("\n", "执行结束".center(scale//2, "-"))
